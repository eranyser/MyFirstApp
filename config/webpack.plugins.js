"use strict";
process.noDeprecation = true; // to remove warnings generated by hmr-loader and ng-router-loader
const webpack = require('webpack');
const helpers = require('./helpers');

/**
 * Webpack Plugins
 */
// const tsConfig = require('../tsconfig.json');
const NamedModulesPlugin = require('webpack/lib/NamedModulesPlugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin');
const CleanWebpackPlugin = require('clean-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const CommonsChunkPlugin = require('webpack/lib/optimize/CommonsChunkPlugin');
const ContextReplacementPlugin = require('webpack/lib/ContextReplacementPlugin');
// const ExtractTextPlugin = require("extract-text-webpack-plugin");
const {CheckerPlugin, TsConfigPathsPlugin} = require('awesome-typescript-loader');
const ProvidePlugin = require('webpack/lib/ProvidePlugin');
const DefinePlugin = require('webpack/lib/DefinePlugin');
const NormalModuleReplacementPlugin = require('webpack/lib/NormalModuleReplacementPlugin');
const IgnorePlugin = require('webpack/lib/IgnorePlugin');
const DedupePlugin = require('webpack/lib/optimize/DedupePlugin');
const UglifyJsPlugin = require('webpack/lib/optimize/UglifyJsPlugin');
const HtmlElementsPlugin = require('./html-elements-plugin');
const dllBundles = require('./dll-bundles');
const SvgStore = require('webpack-svgstore-plugin');
const DllBundlesPlugin = require('webpack-dll-bundles-plugin').DllBundlesPlugin;
const webpackMerge = require('webpack-merge');
const ScriptExtHtmlWebpackPlugin = require('script-ext-html-webpack-plugin');
const path = require('path');
const ngcWebpack = require('ngc-webpack');
const AssetsPlugin = require('assets-webpack-plugin');
const CompressionPlugin = require('compression-webpack-plugin');

module.exports = function (metadata) {
	const isProduction = metadata.ENV === 'production';
	const plugins = {
		"assets": new AssetsPlugin({
			                           path: helpers.root('dist'),
			                           filename: 'webpack-assets.json',
			                           prettyPrint: true
		                           }),
		"ngc": new ngcWebpack.NgcWebpackPlugin({
			                                       disabled: !metadata.AOT,
			                                       tsConfig: helpers.root('tsconfig.webpack.json'),
			                                       resourceOverride: helpers.root('config/resource-override.js')
		                                       }),
		"fix": new webpack.ContextReplacementPlugin( 	//see https://github.com/angular/angular/issues/11580
		                                                // The (\\|\/) piece accounts for path separators in *nix and Windows
		                                                /angular(\\|\/)core(\\|\/)(esm(\\|\/)src|src)(\\|\/)linker/,
		                                                helpers.root('src')  // location of your src
		),
		"fork": new CheckerPlugin(),
		"SvgStore": new SvgStore({
			                         svgoOptions: { // svgo options https://github.com/svg/svgo
				                         plugins: [
					                         {removeStyleElement: true},
					                         {collapseGroups: true},
					                         {cleanupIDs: true},
					                         {removeDimensions: true}
				                         ]
			                         }
		                         }),
		"Paths": new TsConfigPathsPlugin(),
		// "provide": new webpack.ProvidePlugin({
		// 	$: "jquery",
		// 	jQuery: "jquery"
		// }),
		/**
		 * Plugin: ContextReplacementPlugin
		 * Description: Provides context to Angular's use of System.import
		 *
		 * See: https://webpack.github.io/docs/list-of-plugins.html#contextreplacementplugin
		 * See: https://github.com/angular/angular/issues/11580
		 */

		"ngRoutesContext": new ContextReplacementPlugin(
			// The (\\|\/) piece accounts for path separators in *nix and Windows
			/angular(\\|\/)core(\\|\/)src(\\|\/)linker/,
			helpers.root('src'), // location of your src
			{
				// your Angular Async Route paths relative to this root directory
			}),
		"html": new HtmlWebpackPlugin({ // https://github.com/ampedandwired/html-webpack-plugin
			                              minify: (metadata.ENV === 'production') ? {removeComments: true} : false, // https://github.com/kangax/html-minifier#options-quick-reference
			                              metadata: metadata,
			                              inject: 'head', // but we use defer so this is actually evaluated at body load end
			                              hash: true,
			                              chunksSortMode: 'dependency',
			                              template: 'src/index.tmpl.html',
			                              //     chunks:'viewer',  // when doing angular in webworkers we must make use of these to omit the webworker chunk
			                              filename: 'index.html'
		                              }),
		/*
		 * Plugin: HtmlHeadConfigPlugin
		 * Description: Generate html tags based on javascript maps.
		 *
		 * If a publicPath is set in the webpack output configuration, it will be automatically added to
		 * href attributes, you can disable that by adding a "=href": false property.
		 * You can also enable it to other attribute by settings "=attName": true.
		 *
		 * The configuration supplied is map between a location (key) and an element definition object (value)
		 * The location (key) is then exported to the template under then htmlElements property in webpack configuration.
		 *
		 * Example:
		 *  Adding this plugin configuration
		 *  new HtmlElementsPlugin({
		 *    headTags: { ... }
		 *  })
		 *
		 *  Means we can use it in the template like this:
		 *  <%= webpackConfig.htmlElements.headTags %>
		 *
		 * Dependencies: HtmlWebpackPlugin
		 */
		"headTags": new HtmlElementsPlugin({headTags: require('./head-config.common')}),
		"define": new webpack.DefinePlugin({
			                                   'ENV': JSON.stringify(metadata.ENV),
			                                   'HMR': metadata.HMR,
			                                   'process.env': {
				                                   'NODE_ENV': JSON.stringify(metadata.ENV),
			                                   },
		                                   }),
		"commonOptions": new webpack.LoaderOptionsPlugin({
			                                                 minimize: isProduction,
			                                                 debug: !isProduction,
			                                                 options: {
				                                                 context: helpers.root(),
				                                                 output: {path: helpers.root('dist')},
				                                                 /**
				                                                  * Static analysis linter for TypeScript advanced options configuration
				                                                  * Description: An extensible linter for the TypeScript language.
				                                                  *
				                                                  * See: https://github.com/wbuchwalter/tslint-loader
				                                                  */
				                                                 tslint: {
					                                                 emitErrors: true,
					                                                 formatter: 'stylish',
					                                                 typeCheck: false,
					                                                 tsConfigFile: 'tsconfig.json',
					                                                 failOnHint: false,
					                                                 resourcePath: 'src'
				                                                 },
				                                                 htmlLoader: {
					                                                 minimize: true,
					                                                 removeAttributeQuotes: false,
					                                                 caseSensitive: true,
					                                                 customAttrSurround: [
						                                                 [/#/, /(?:)/],
						                                                 [/\*/, /(?:)/],
						                                                 [/\[?\(?/, /(?:)/]
					                                                 ],
					                                                 customAttrAssign: [/\)?\]?=/]
				                                                 }
			                                                 }
		                                                 }),
		ext: new ScriptExtHtmlWebpackPlugin({
			                                    defaultAttribute: 'defer'
		                                    })
	};
	if (metadata.ENV !== 'test') {
		plugins.copy = new CopyWebpackPlugin([
			                                     {from: 'src/assets', to: 'assets'},
		                                     ]);

		plugins.commonChunks0 = new CommonsChunkPlugin({
			                                               name: 'polyfills',
			                                               chunks: ['polyfills']
		                                               });
		// This enables tree shaking of the vendor modules
		plugins.commonChunks1 = new CommonsChunkPlugin({
			                                               name: 'vendor',
			                                               chunks: ['main'],
			                                               minChunks: module => /node_modules/.test(module.resource)
		                                               });
		// Specify the correct order the scripts will be injected in
		plugins.commonChunks2 = new CommonsChunkPlugin({
			                                               name: ['polyfills', 'vendor'].reverse()
		                                               });


		// plugins.extractText = new ExtractTextPlugin({name:"assets/css/[name].css",disabled: metadata.ENV !== 'production'});
	}

	if (isProduction) {
		plugins.compress = new CompressionPlugin({
			                                         regExp: /\.css$|\.html$|\.js$|\.map$/,
			                                         threshold: 2 * 1024
		                                         });

		plugins.clean = new CleanWebpackPlugin(['dist'], {
			root: helpers.root(),
			verbose: true,
			dry: false
		});

		plugins.uglify = new UglifyJsPlugin(
			{
				sourceMap: true,
				beautify: false, //prod
				output: {
					comments: false
				}, //prod
				mangle: {
					screw_ie8: true
				}, //prod
				compress: {
					screw_ie8: true,
					warnings: false,
					conditionals: true,
					unused: true,
					comparisons: true,
					sequences: true,
					dead_code: true,
					evaluate: true,
					if_return: true,
					join_vars: true,
					negate_iife: false // we need this for lazy v8
				},
			});
		plugins.replace1 = new NormalModuleReplacementPlugin(
			/angular2-hmr/,
			helpers.root('config/empty.js')
		);
		plugins.replace2 = new NormalModuleReplacementPlugin(
			/zone\.js(\\|\/)dist(\\|\/)long-stack-trace-zone/,
			helpers.root('config/empty.js')
		);
		if (metadata.AOT) {
			// AoT
			plugins.aot_rep1 = new NormalModuleReplacementPlugin(
				/@angular(\\|\/)upgrade/,
				helpers.root('config/resource-override.js')
			);
			plugins.aot_rep2 = new NormalModuleReplacementPlugin(
				/@angular(\\|\/)compiler/,
				helpers.root('config/resource-override.js')
			);
			plugins.aot_rep3 = new NormalModuleReplacementPlugin(
				/@angular(\\|\/)platform-browser-dynamic/,
				helpers.root('config/resource-override.js')
			);
			plugins.aot_rep4 = new NormalModuleReplacementPlugin(
				/dom(\\|\/)debug(\\|\/)ng_probe/,
				helpers.root('config/resource-override.js')
			);
			plugins.aot_rep5 = new NormalModuleReplacementPlugin(
				/dom(\\|\/)debug(\\|\/)by/,
				helpers.root('config/resource-override.js')
			);
			plugins.aot_rep6 = new NormalModuleReplacementPlugin(
				/src(\\|\/)debug(\\|\/)debug_node/,
				helpers.root('config/resource-override.js')
			);
			plugins.aot_rep7 = new NormalModuleReplacementPlugin(
				/src(\\|\/)debug(\\|\/)debug_renderer/,
				helpers.root('config/resource-override.js')
			);
		}
	} else {
		/*Plugin: NamedModulesPlugin (experimental)
		 * Description: Uses file names as module name.
		 *
		 * See: https://github.com/webpack/webpack/commit/a04ffb928365b19feb75087c63f13cadfc08e1eb

		 */
		plugins.names = new NamedModulesPlugin();
		// if (metadata.env !== 'test') {
		plugins.dll = new DllBundlesPlugin({
			                                   bundles: dllBundles,
			                                   dllDir: helpers.root('dll'),
			                                   webpackConfig: webpackMerge(require('./webpack.common.config')({env: metadata.ENV}), {devtool: 'sourcemap'})
		                                   });
		/**
		 * Plugin: AddAssetHtmlPlugin
		 * Description: Adds the given JS or CSS file to the files
		 * Webpack knows about, and put it into the list of assets
		 * html-webpack-plugin injects into the generated html.
		 *
		 * See: https://github.com/SimenB/add-asset-html-webpack-plugin
		 */
		plugins.dllAssets = new AddAssetHtmlPlugin([
			                                           {filepath: helpers.root(`dll/${DllBundlesPlugin.resolveFile('polyfills')}`)},
			                                           {filepath: helpers.root(`dll/${DllBundlesPlugin.resolveFile('vendor')}`)}
		                                           ]);
		// }
	}
	return plugins;
};
